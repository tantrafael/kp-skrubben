package kp.server{	import flash.display.Loader;	import flash.geom.Point;	import flash.events.EventDispatcher;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.net.URLRequest;	import flash.net.URLLoader;	import flash.net.sendToURL;	//-------------------------------------------------------------------------	// ServerConnection	//-------------------------------------------------------------------------	public class ServerConnection extends EventDispatcher	{		public static const VIEW:int = 0;		public static const EDIT:int = 1;		public static const DATA_RECEIVED:String = "dataReceived";		private static const INSTANCE:ServerConnection = new ServerConnection();		private const DIRECTIONS:Array = [ "east", "north", "west", "south" ];	//	private var serverUrl:String = "http://10.46.103.133:51014/";		private var serverUrl:String = "server/";		private var actionsUrl:String = null;		private var inventoryData:XMLList = null;		private var roomData:XMLList = null;		private var state:int = -1;		//---------------------------------------------------------------------		public function ServerConnection():void		{			if( INSTANCE != null )			{				throw new Error( "An instance of ServerConnection already exists." );			}		}		//---------------------------------------------------------------------	//	public function Initialize( user:String ):void		public function Initialize( user:String, state:int ):void		{			this.state = state;			if( user != null )			{				actionsUrl = serverUrl + "skrubb/" + user + "/actions/";				GetInitialData();			}			else			{				actionsUrl = serverUrl + "skrubb/KP-Krysse/actions/";			//	actionsUrl = serverUrl + "skrubb/TantRafael/actions/";				GetInitialData();			}		}		//---------------------------------------------------------------------		public static function get Instance():ServerConnection		{			return INSTANCE;		}		//---------------------------------------------------------------------		public function get ServerUrl():String		{			return serverUrl;		}		//---------------------------------------------------------------------		public function PendingInventoryData():Boolean		{			return ( inventoryData != null );		}		//---------------------------------------------------------------------		public function PendingRoomData():Boolean		{			return ( roomData != null );		}		//---------------------------------------------------------------------		private function GetInitialData():void		{			var name:String = null;			if( state == EDIT )			{				name = "get-all-data";			}			else			{				name = "get-display-data";			}		//	var request:URLRequest = new URLRequest( actionsUrl + name + "/?__toolbar=0" );			var request:URLRequest = new URLRequest( actionsUrl + "get-all-data.xml" );			var loader:URLLoader = new URLLoader();			loader.addEventListener( Event.COMPLETE, HandleData );			loader.addEventListener( IOErrorEvent.IO_ERROR, HandleIOError );			loader.load( request );		}		//---------------------------------------------------------------------		public function AddAttribute( id:int, itemId:int, roomId:int, position:Point ):void		{			var request:URLRequest = new URLRequest();			request.url = actionsUrl + "add-item-to-room/?__toolbar=0&id=" + id + "&itemid=" + itemId + "&roomid=" + roomId + "&x=" + position.x + "&y=" + position.y;			sendToURL( request );		}		//---------------------------------------------------------------------		public function SetAttributePosition( id:int, roomId:int, position:Point ):void		{			var request:URLRequest = new URLRequest();			request.url = actionsUrl + "set-item-coordinates/?__toolbar=0&id=" + id + "&roomid=" + roomId + "&x=" + position.x + "&y=" + position.y;			sendToURL( request );		}		//---------------------------------------------------------------------		public function RemoveAttribute( id:int, roomId:int ):void		{			var request:URLRequest = new URLRequest();			request.url = actionsUrl + "remove-item-from-room/?__toolbar=0&id=" + id + "&roomid=" + roomId;			sendToURL( request );		}		//---------------------------------------------------------------------		public function SetBackground( id:int, itemId:int, roomId:int ):void		{			var request:URLRequest = new URLRequest();			request.url = actionsUrl + "change-background-in-room/?__toolbar=0&id=" + id + "&itemid=" + itemId + "&roomid=" + roomId;			sendToURL( request );		}		//---------------------------------------------------------------------		public function UnlockDoor( fromRoomId:int, direction:int ):void		{			var request:URLRequest = new URLRequest();			request.url = actionsUrl + "open-room/?__toolbar=0&roomid=" + fromRoomId + "&dir=" + DIRECTIONS[ direction ];			sendToURL( request );		}		//---------------------------------------------------------------------		public function CreateRoom( fromRoomId:int, direction:int ):void		{			var request:URLRequest = new URLRequest();		//	request.url = actionsUrl + "open-room/?__toolbar=0&roomid=" + fromRoomId + "&dir=" + DIRECTIONS[ direction ];			request.url = actionsUrl + "open-room.xml";			var loader:URLLoader = new URLLoader();			loader.addEventListener( Event.COMPLETE, HandleData );			loader.addEventListener( IOErrorEvent.IO_ERROR, HandleIOError );			loader.load( request );		}		//---------------------------------------------------------------------		private function HandleData( event:Event ):void		{			var loader:URLLoader = URLLoader( event.target );			loader.removeEventListener( Event.COMPLETE, HandleData );			loader.removeEventListener( IOErrorEvent.IO_ERROR, HandleIOError );			var xml:XML = new XML( loader.data );			inventoryData = xml.inventory_items.item;			roomData = xml.rooms.room;			dispatchEvent( new Event( DATA_RECEIVED ) );		}		//---------------------------------------------------------------------		private function HandleIOError( event:IOErrorEvent ):void		{			var loader:URLLoader = URLLoader( event.target );			loader.removeEventListener( Event.COMPLETE, HandleData );			loader.removeEventListener( IOErrorEvent.IO_ERROR, HandleIOError );			trace( event );		}		//---------------------------------------------------------------------		public function RetrieveRoomData():XMLList		{			return roomData;			roomData = null;		}		//---------------------------------------------------------------------		public function RetrieveInventoryData():XMLList		{			return inventoryData;			inventoryData = null;		}		//---------------------------------------------------------------------		public function Destroy():void		{}	}}